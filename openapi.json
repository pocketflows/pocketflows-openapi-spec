{
  "openapi": "3.0.3",
  "info": {
    "title": "Pocketflows API",
    "version": "0.0.3"
  },
  "servers": [
    {
      "url": "https://api.pocketflows.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/rewards_programs": {
      "get": {
        "responses": {
          "200": {
            "description": "A dictionary with a `rewards_programs` property which is an array of `RewardsProgram` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rewards_programs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RewardsProgram"
                      },
                      "description": "An array of rewards programs"
                    }
                  },
                  "required": [
                    "rewards_programs"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all rewards programs"
      },
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "points_earned_per_dollar_spent": {
                    "type": "integer",
                    "description": "The number of points earned per dollar spent"
                  },
                  "point_redemption_value": {
                    "type": "string",
                    "description": "The value of a single point in dollars"
                  },
                  "points_for_member_class_attendance": {
                    "type": "integer",
                    "description": "The number of points earned for attending a class"
                  },
                  "points_for_referring_new_student": {
                    "type": "integer",
                    "description": "The number of points earned for referring a new student"
                  },
                  "points_for_referring_new_student_that_signs_up": {
                    "type": "integer",
                    "description": "The number of points earned for referring a new student that signs up"
                  },
                  "points_for_every_ten_classes_non_member": {
                    "type": "integer",
                    "description": "The number of points earned for every ten classes attended"
                  },
                  "points_for_first_visit_in_three_months": {
                    "type": "integer",
                    "description": "The number of points earned for first visit in three months"
                  }
                },
                "required": [
                  "points_earned_per_dollar_spent",
                  "point_redemption_value",
                  "points_for_member_class_attendance",
                  "points_for_referring_new_student",
                  "points_for_referring_new_student_that_signs_up",
                  "points_for_every_ten_classes_non_member",
                  "points_for_first_visit_in_three_months"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `RewardsProgram` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsProgram"
                }
              }
            }
          }
        },
        "summary": "Create a rewards program"
      }
    },
    "/rewards_programs/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `RewardsProgram` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsProgram"
                }
              }
            }
          }
        },
        "summary": "Retrieve a rewards program"
      }
    },
    "/rewards_programs/{id}/members": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a `members` property which is an array of `Member` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Member"
                      },
                      "description": "An array of members"
                    }
                  },
                  "required": [
                    "members"
                  ]
                }
              }
            }
          }
        },
        "summary": "List a rewards program's members"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "user_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `Member` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "summary": "Create a member in a rewards program"
      }
    },
    "/rewards_programs/{id}/members/{member_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          },
          {
            "in": "path",
            "name": "member_id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the member",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `Member` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "summary": "Retrieve a member"
      }
    },
    "/rewards_programs/{id}/locations": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a `locations` property which is an array of `Location` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      },
                      "description": "An array of locations"
                    }
                  },
                  "required": [
                    "locations"
                  ]
                }
              }
            }
          }
        },
        "summary": "List a rewards program's locations"
      }
    },
    "/rewards_programs/{id}/add_location": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location_id": {
                    "type": "string",
                    "description": "The ID of the location to add to the rewards program"
                  }
                },
                "required": [
                  "location_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `Location` object that was added to the rewards program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        },
        "summary": "Add a location to a rewards program"
      }
    },
    "/rewards_programs/{id}/tiers": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a `tiers` property which is an array of `Tier` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tiers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      },
                      "description": "An array of tiers"
                    }
                  },
                  "required": [
                    "tiers"
                  ]
                }
              }
            }
          }
        },
        "summary": "List a rewards program's tiers"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The tier's name"
                  },
                  "minimum_points": {
                    "type": "integer",
                    "description": "The minimum number of points to reach this tier"
                  },
                  "perks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The perks associated with reaching this tier"
                  }
                },
                "required": [
                  "name",
                  "minimum_points",
                  "perks"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `Tier` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tier"
                }
              }
            }
          }
        },
        "summary": "Create a tier in a rewards program"
      }
    },
    "/locations": {
      "get": {
        "responses": {
          "200": {
            "description": "A dictionary with a `locations` property which is an array of `Location` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      },
                      "description": "An array of locations"
                    }
                  },
                  "required": [
                    "locations"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all locations"
      },
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rewards_program_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the location's rewards program"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `Location` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        },
        "summary": "Create a location"
      }
    },
    "/locations/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the location",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `Location` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        },
        "summary": "Retrieve a location"
      }
    },
    "/locations/{id}/members": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the location",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a `members` property which is an array of `Member` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Member"
                      },
                      "description": "An array of members"
                    }
                  },
                  "required": [
                    "members"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all a location's members"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the location",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to add as a member to the location"
                  }
                },
                "required": [
                  "user_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `Member` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "summary": "Create a member of a location"
      }
    },
    "/locations/{id}/change_rewards_program": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the location",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rewards_program_id": {
                    "type": "string",
                    "description": "The ID of the location's new rewards program"
                  }
                },
                "required": [
                  "rewards_program_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The changed `Location` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        },
        "summary": "Update a location's rewards program"
      }
    },
    "/users": {
      "get": {
        "responses": {
          "200": {
            "description": "A dictionary with a `users` property which is an array of `User` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "description": "An array of users"
                    }
                  },
                  "required": [
                    "users"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all users"
      },
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string",
                    "description": "The user's phone number"
                  }
                },
                "required": [
                  "phone_number"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `User` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Create a user"
      }
    },
    "/users/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `User` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Retrieve a user"
      }
    },
    "/track": {
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "The name of the event"
                  },
                  "member_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the member doing the event"
                  },
                  "location_member_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the location member the event"
                  },
                  "rewards_program_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the rewards program the event belongs to"
                  },
                  "location_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the location the event belongs to"
                  },
                  "user_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the user doing the event"
                  },
                  "price": {
                    "type": "string",
                    "nullable": true,
                    "description": "The price of the item involved in the event"
                  },
                  "points": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The number of points earned for the event"
                  }
                },
                "required": [
                  "event",
                  "member_id",
                  "location_member_id",
                  "rewards_program_id",
                  "location_id",
                  "user_id",
                  "price",
                  "points"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `Event` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "summary": "Track an event"
      }
    },
    "/rewards_programs/{id}/flows": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the rewards program",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The created `Flow` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          }
        },
        "summary": "Create a flow to edit a rewards program"
      }
    },
    "/flows/{id}/embed": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the flow",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The embeddable HTML content of the flow",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Embed a flow"
      }
    },
    "/flows/{id}/embed/analytics": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the flow",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The embeddable HTML content of the flow analytics",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Embed an analytics flow"
      }
    },
    "/employees/{id}/emails": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the employee",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with an `emails` property which is an array of `Email` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emails": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Email"
                      },
                      "description": "An array of emails"
                    }
                  },
                  "required": [
                    "emails"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all an employee's emails"
      }
    },
    "/emails/{id}/threads": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the email",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a `threads` property which is an array of `Thread` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "threads": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PocketflowsThread"
                      },
                      "description": "An array of threads"
                    }
                  },
                  "required": [
                    "threads"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all an email's threads"
      }
    },
    "/emails/{id}/send": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the email",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "The email address to send the email to"
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of the email"
                  },
                  "body": {
                    "type": "string",
                    "description": "The body of the email"
                  }
                },
                "required": [
                  "to",
                  "subject",
                  "body"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The sent `Email` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          }
        },
        "summary": "Send an email"
      }
    },
    "/threads/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `Thread` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PocketflowsThread"
                }
              }
            }
          }
        },
        "summary": "Retrieve an email thread"
      }
    },
    "/threads/{id}/reply": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The body of the email"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The replied `Thread` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PocketflowsThread"
                }
              }
            }
          }
        },
        "summary": "Reply to an email thread"
      }
    },
    "/campaigns": {
      "get": {
        "responses": {
          "200": {
            "description": "A dictionary with a `campaigns` property which is an array of `Campaign` objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "campaigns": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Campaign"
                      },
                      "description": "An array of campaigns"
                    }
                  },
                  "required": [
                    "campaigns"
                  ]
                }
              }
            }
          }
        },
        "summary": "List all campaigns"
      }
    },
    "/businesses/{id}/campaigns": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the business",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enrolled_users": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    ],
                    "description": "The users enrolled in the campaign"
                  },
                  "steps": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The step type. Always \"email\" for this step"
                            },
                            "email_template_id": {
                              "type": "string",
                              "description": "The ID of the email template to use in this step"
                            }
                          },
                          "required": [
                            "type",
                            "email_template_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The step type. Always \"sms\" for this step"
                            },
                            "sms_template_id": {
                              "type": "string",
                              "description": "The ID of the SMS template to use in this step"
                            }
                          },
                          "required": [
                            "type",
                            "sms_template_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The step type. Always \"wait\" for this step"
                            },
                            "duration": {
                              "type": "integer",
                              "description": "The number of seconds to wait"
                            }
                          },
                          "required": [
                            "type",
                            "duration"
                          ]
                        }
                      ]
                    },
                    "description": "The steps of the campaign"
                  }
                },
                "required": [
                  "enrolled_users",
                  "steps"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created `Campaign` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          }
        },
        "summary": "Create a campaign"
      }
    },
    "/businesses/{id}/campaigns/embeds": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the business",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The created `CampaignEmbed` object. Can be used to create a new campaign for the business",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignEmbed"
                }
              }
            }
          }
        },
        "summary": "Create a campaign embed to create a new campaign"
      }
    },
    "/campaigns/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the campaign",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `Campaign` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          }
        },
        "summary": "Retrieve a campaign"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the campaign",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "steps": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The step type. Always \"email\" for this step"
                            },
                            "email_template_id": {
                              "type": "string",
                              "description": "The ID of the email template to use in this step"
                            }
                          },
                          "required": [
                            "type",
                            "email_template_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The step type. Always \"sms\" for this step"
                            },
                            "sms_template_id": {
                              "type": "string",
                              "description": "The ID of the SMS template to use in this step"
                            }
                          },
                          "required": [
                            "type",
                            "sms_template_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The step type. Always \"wait\" for this step"
                            },
                            "duration": {
                              "type": "integer",
                              "description": "The number of seconds to wait"
                            }
                          },
                          "required": [
                            "type",
                            "duration"
                          ]
                        }
                      ]
                    },
                    "description": "The updated steps of the campaign. Can be omitted"
                  },
                  "name": {
                    "type": "string",
                    "description": "The updated name of the campaign. Can be omitted"
                  },
                  "enrolled_user_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The updated enrolled user IDs of the campaign. Can be omitted"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated `Campaign` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          }
        },
        "summary": "Update a campaign"
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the campaign",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted `Campaign` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          }
        },
        "summary": "Delete a campaign"
      }
    },
    "/campaigns/{id}/embeds": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the campaign",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The created `CampaignEmbed` object. Can be used to modify the campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignEmbed"
                }
              }
            }
          }
        },
        "summary": "Create a campaign embed"
      }
    },
    "/campaign_embeds/{id}/show": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the campaign embed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The embeddable HTML that will render a UI for editing the campaign",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Embed the campaign editor"
      }
    },
    "/campaign_embeds/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the campaign embed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A `CampaignEmbed` object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignEmbed"
                }
              }
            }
          }
        },
        "summary": "Retrieve a campaign embed"
      }
    },
    "/employees/{id}/emails/connect/gmail": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the employee",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The redirect to the Google sign-in page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Connect a Gmail account to an employee"
      }
    }
  },
  "security": [
    {
      "HttpBasicAuth": [

      ]
    }
  ],
  "components": {
    "securitySchemes": {
      "HttpBasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "CampaignEmbed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the campaign embed"
          },
          "url": {
            "type": "string",
            "description": "The URL to embed the campaign editor"
          },
          "expires_at": {
            "type": "string",
            "description": "When the campaign embed expires and needs to be regenerated"
          }
        },
        "required": [
          "id",
          "url",
          "expires_at"
        ],
        "title": "The Campaign Embed object"
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the campaign"
          },
          "enrolled_users": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            ],
            "description": "The users enrolled in the campaign"
          },
          "steps": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The step type. Always \"email\" for this step"
                    },
                    "email_template_id": {
                      "type": "string",
                      "description": "The ID of the email template to use in this step"
                    }
                  },
                  "required": [
                    "type",
                    "email_template_id"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The step type. Always \"sms\" for this step"
                    },
                    "sms_template_id": {
                      "type": "string",
                      "description": "The ID of the SMS template to use in this step"
                    }
                  },
                  "required": [
                    "type",
                    "sms_template_id"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The step type. Always \"wait\" for this step"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "The number of seconds to wait"
                    }
                  },
                  "required": [
                    "type",
                    "duration"
                  ]
                }
              ]
            },
            "description": "The steps of the campaign"
          }
        },
        "required": [
          "id",
          "enrolled_users",
          "steps"
        ],
        "title": "The Campaign object"
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the template"
          }
        },
        "required": [
          "id"
        ],
        "title": "The Template object"
      },
      "PocketflowsThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the thread"
          }
        },
        "required": [
          "id"
        ],
        "title": "The Thread object"
      },
      "Email": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the email"
          }
        },
        "required": [
          "id"
        ],
        "title": "The Email object"
      },
      "Flow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the flow"
          },
          "expires_at": {
            "type": "string",
            "description": "When the flow expires"
          },
          "url": {
            "type": "string",
            "description": "The URL to embed the flow"
          }
        },
        "required": [
          "id",
          "expires_at",
          "url"
        ],
        "title": "The Flow object"
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the event"
          },
          "event_name": {
            "type": "string",
            "description": "The name of the event"
          },
          "member": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Member"
              }
            ],
            "description": "The member associated with the event"
          }
        },
        "required": [
          "id",
          "event_name",
          "member"
        ],
        "title": "The Event object"
      },
      "Tier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tier"
          },
          "name": {
            "type": "string",
            "description": "The tier's name"
          },
          "minimum_points": {
            "type": "integer",
            "description": "The minimum number of points to reach this tier"
          },
          "perks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The perks associated with reaching this tier"
          }
        },
        "required": [
          "id",
          "name",
          "minimum_points",
          "perks"
        ],
        "title": "The Tier object"
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the member"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user associated with the member"
          },
          "rewards_program": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/RewardsProgram"
              }
            ],
            "description": "The member's rewards program"
          },
          "point_total": {
            "type": "integer",
            "description": "The total number of points the member has earned in their lifetime"
          },
          "point_balance": {
            "type": "integer",
            "description": "The number of points the member currently has"
          }
        },
        "required": [
          "id",
          "user",
          "rewards_program",
          "point_total",
          "point_balance"
        ],
        "title": "The Member object"
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the location"
          },
          "rewards_program": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/RewardsProgram"
              }
            ],
            "nullable": true,
            "description": "The location's rewards program"
          }
        },
        "required": [
          "id",
          "rewards_program"
        ],
        "title": "The Location object"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the user"
          },
          "phone_number": {
            "type": "string",
            "description": "The user's phone number"
          }
        },
        "required": [
          "id",
          "phone_number"
        ],
        "title": "The User object"
      },
      "RewardsProgram": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the rewards program"
          },
          "points_earned_per_dollar_spent": {
            "type": "integer",
            "description": "The number of points earned per dollar spent"
          },
          "point_redemption_value": {
            "type": "string",
            "description": "The value of a single point in dollars"
          },
          "points_for_member_class_attendance": {
            "type": "integer",
            "description": "The number of points earned for attending a class"
          },
          "points_for_referring_new_student": {
            "type": "integer",
            "description": "The number of points earned for referring a new student"
          },
          "points_for_referring_new_student_that_signs_up": {
            "type": "integer",
            "description": "The number of points earned for referring a new student that signs up"
          },
          "points_for_every_ten_classes_non_member": {
            "type": "integer",
            "description": "The number of points earned for every ten classes attended"
          },
          "points_for_first_visit_in_three_months": {
            "type": "integer",
            "description": "The number of points earned for first visit in three months"
          }
        },
        "required": [
          "id",
          "points_earned_per_dollar_spent",
          "point_redemption_value",
          "points_for_member_class_attendance",
          "points_for_referring_new_student",
          "points_for_referring_new_student_that_signs_up",
          "points_for_every_ten_classes_non_member",
          "points_for_first_visit_in_three_months"
        ],
        "title": "The Rewards Program object"
      }
    }
  }
}